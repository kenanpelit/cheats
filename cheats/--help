Move the cursor up a few lines, clearing these lines, then print a help message.
LINECOUNT=$((1 + (($(head -n 1 -- "$*" | wc --chars) + $COLUMNS - 1) / $COLUMNS) + (($(tail -n 1 -- "$*" | wc --chars) + $COLUMNS - 1) / $COLUMNS))); for ((n=0; n<$LINECOUNT; n++)) do tput cuu 1; tput el; done; fold -sw $COLUMNS <<< $'cheats is a command line utility that allows you to define interactive cheat sheets for the command line.\n\nTo see all cheats related to one command, invoke cheats with the name of that command as a parameter – for example, cheats git will print all git-related cheats. If you’ve found a cheat that you want to execute, invoke cheats with the exact name of that cheat (printed in bold in the previous output). By convention, cheats are numbered like this: cheats git rebase 1 (that’s right, you don’t need to quote the arguments).\n\nThe cheat can contain $variables, for which you will be prompted; for example, a cheat might go “git add $file” and ask you to enter a filename.\n\nDefining new cheats is simple: just put a file with the name of your cheat in the ~/.cheats directory; the first line should be a shortish description of what the cheat does, the second line should be the cheat itself. You can define prompts in the following lines, separating the variable name and the prompt text with a colon: for example, the line “file:Enter the filename” will ask the user to enter a filename and then substitute “$file” in the command with the user’s input before running it.\n\nFor more information, see the README.'
